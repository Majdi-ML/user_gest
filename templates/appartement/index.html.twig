{% extends 'base.html.twig' %}

{% block title %}Appartements{% endblock %}

{% block css %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <style>
        .filter-row th {
            padding: 8px 3px !important;
            vertical-align: top;
        }
        .filter-container {
            display: flex;
            gap: 5px;
            align-items: center;
            margin-bottom: 10px;
        }
        .filter-select {
            width: 100%;
            min-width: 120px;
        }
        .filter-input {
            width: 100%;
            min-width: 150px;
        }
        .btn-add-condition {
            margin-top: 5px;
        }
        .date-filter {
            display: none;
        }
        .logic-operator {
            font-weight: bold;
            margin: 0 10px;
        }
        .appartement-type-tabs {
            margin-bottom: 20px;
        }
        .export-buttons {
            margin-bottom: 20px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">üè† Liste des Appartements</h1>

    <div class="mb-3 text-end">
        <a href="{{ path('app_appartement_new') }}" class="btn btn-success">‚ûï Ajouter un Appartement</a>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtres Avanc√©s</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicAnd" value="AND" checked>
                    <label class="form-check-label" for="filterLogicAnd">Toutes les conditions (AND)</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicOr" value="OR">
                    <label class="form-check-label" for="filterLogicOr">Au moins une condition (OR)</label>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Type d'appartement:</label>
                <div class="form-check form-check-inline">
                    <input class="form-check-input appartement-type" type="radio" name="appartementType" id="appartementTypeAll" value="all" checked>
                    <label class="form-check-label" for="appartementTypeAll">Tous</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input appartement-type" type="radio" name="appartementType" id="appartementTypeLoue" value="loue">
                    <label class="form-check-label" for="appartementTypeLoue">Lou√©s</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input appartement-type" type="radio" name="appartementType" id="appartementTypeNonLoue" value="non_loue">
                    <label class="form-check-label" for="appartementTypeNonLoue">Non Lou√©s</label>
                </div>
            </div>

            <div id="filterBuilder">
                <!-- Les filtres seront ajout√©s ici dynamiquement -->
            </div>
            <button id="addFilterBtn" class="btn btn-primary btn-sm btn-add-condition mt-2">
                <i class="bi bi-plus"></i> Ajouter une condition
            </button>
            <button id="applyFiltersBtn" class="btn btn-success btn-sm mt-2">
                <i class="bi bi-funnel"></i> Appliquer les filtres
            </button>
            <button id="resetFiltersBtn" class="btn btn-danger btn-sm mt-2">
                <i class="bi bi-x-circle"></i> R√©initialiser
            </button>
        </div>
    </div>

    <div class="export-buttons text-end">
        <button id="exportPdfBtn" class="btn btn-danger btn-sm me-2">
            <i class="bi bi-file-pdf"></i> Exporter en PDF
        </button>
        <button id="exportExcelBtn" class="btn btn-success btn-sm">
            <i class="bi bi-file-excel"></i> Exporter en Excel
        </button>
    </div>

    <ul class="nav nav-tabs appartement-type-tabs" id="appartementTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="loues-tab" data-bs-toggle="tab" data-bs-target="#loues" type="button" role="tab" aria-controls="loues" aria-selected="true">‚úÖ Appartements Lou√©s</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="non-loues-tab" data-bs-toggle="tab" data-bs-target="#non-loues" type="button" role="tab" aria-controls="non-loues" aria-selected="false">‚ùå Appartements Non Lou√©s</button>
        </li>
    </ul>

    <div class="tab-content" id="appartementTabContent">
        <div class="tab-pane fade show active" id="loues" role="tabpanel" aria-labelledby="loues-tab">
            <table class="table table-bordered table-striped mb-5">
                <thead class="table-light">
                    <tr>
                        <th>ID</th>
                        <th>Num√©ro</th>
                        <th>Type</th>
                        <th>√âtage</th>
                        <th>Bloc</th>
                        <th>Occup√©</th>
                        <th>Locataire</th>
                        <th>Propri√©taire</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                {% for appartement in appartementsLoues %}
                    <tr data-id="{{ appartement.id }}"
                        data-type="loue"
                        data-numero="{{ appartement.numero }}"
                        data-type-appartement="{{ appartement.type }}"
                        data-etage="{{ appartement.etage }}"
                        data-bloc="{{ appartement.bloc ? appartement.bloc.nom : '' }}"
                        data-occupe="{{ appartement.estHabite ? 'Oui' : 'Non' }}"
                        data-locataire="{{ appartement.locataire ? appartement.locataire.nom ~ ' ' ~ appartement.locataire.prenom : '' }}"
                        data-proprietaire="{{ appartement.proprietaire ? appartement.proprietaire.nom ~ ' ' ~ appartement.proprietaire.prenom : '' }}">
                        <td>{{ appartement.id }}</td>
                        <td>{{ appartement.numero }}</td>
                        <td>{{ appartement.type }}</td>
                        <td>{{ appartement.etage }}</td>
                        <td>{{ appartement.bloc ? appartement.bloc.nom : 'N/A' }}</td>
                        <td>{{ appartement.estHabite ? '‚úÖ Oui' : '‚ùå Non' }}</td>
                        <td>{{ appartement.locataire ? appartement.locataire.nom ~ ' ' ~ appartement.locataire.prenom : 'X' }}</td>
                        <td>{{ appartement.proprietaire ? appartement.proprietaire.nom ~ ' ' ~ appartement.proprietaire.prenom : 'X' }}</td>
                        <td>
                            <a href="{{ path('app_appartement_show', {'id': appartement.id}) }}" class="btn btn-sm btn-primary">Voir</a>
                            <a href="{{ path('app_appartement_edit', {'id': appartement.id}) }}" class="btn btn-sm btn-warning">Modifier</a>
                        </td>
                    </tr>
                {% else %}
                    <tr><td colspan="9" class="text-center">Aucun appartement lou√© trouv√©</td></tr>
                {% endfor %}
                </tbody>
            </table>
        </div>

        <div class="tab-pane fade" id="non-loues" role="tabpanel" aria-labelledby="non-loues-tab">
            <table class="table table-bordered table-striped">
                <thead class="table-light">
                    <tr>
                        <th>ID</th>
                        <th>Num√©ro</th>
                        <th>Type</th>
                        <th>√âtage</th>
                        <th>Bloc</th>
                        <th>Occup√©</th>
                        <th>Locataire</th>
                        <th>Propri√©taire</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                {% for appartement in appartementsNonLoues %}
                    <tr data-id="{{ appartement.id }}"
                        data-type="non_loue"
                        data-numero="{{ appartement.numero }}"
                        data-type-appartement="{{ appartement.type }}"
                        data-etage="{{ appartement.etage }}"
                        data-bloc="{{ appartement.bloc ? appartement.bloc.nom : '' }}"
                        data-occupe="{{ appartement.estHabite ? 'Oui' : 'Non' }}"
                        data-locataire=""
                        data-proprietaire="{{ appartement.proprietaire ? appartement.proprietaire.nom ~ ' ' ~ appartement.proprietaire.prenom : '' }}">
                        <td>{{ appartement.id }}</td>
                        <td>{{ appartement.numero }}</td>
                        <td>{{ appartement.type }}</td>
                        <td>{{ appartement.etage }}</td>
                        <td>{{ appartement.bloc ? appartement.bloc.nom : 'N/A' }}</td>
                        <td>{{ appartement.estHabite ? '‚úÖ Oui' : '‚ùå Non' }}</td>
                        <td><span class="text-muted">X</span></td>
                        <td>{{ appartement.proprietaire ? appartement.proprietaire.nom ~ ' ' ~ appartement.proprietaire.prenom : 'X' }}</td>
                        <td>
                            <a href="{{ path('app_appartement_show', {'id': appartement.id}) }}" class="btn btn-sm btn-primary">Voir</a>
                            <a href="{{ path('app_appartement_edit', {'id': appartement.id}) }}" class="btn btn-sm btn-warning">Modifier</a>
                        </td>
                    </tr>
                {% else %}
                    <tr><td colspan="9" class="text-center">Aucun appartement non lou√© trouv√©</td></tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        $(document).ready(function() {
            // Donn√©es pour les colonnes
            const columnData = {
                type: { type: 'text' },
                numero: { type: 'text' },
                'type-appartement': { type: 'text' },
                etage: { type: 'text' },
                bloc: { type: 'text' },
                occupe: { type: 'text' },
                locataire: { type: 'text' },
                proprietaire: { type: 'text' }
            };

            // Op√©rateurs par type de colonne
            const textOperators = [
                { id: 'equals', text: '√âgal √†' },
                { id: 'not_equals', text: 'Diff√©rent de' },
                { id: 'contains', text: 'Contient' },
                { id: 'not_contains', text: 'Ne contient pas' },
                { id: 'starts_with', text: 'Commence par' },
                { id: 'ends_with', text: 'Finit par' },
                { id: 'empty', text: 'Est vide' },
                { id: 'not_empty', text: "N'est pas vide" }
            ];

            // Ajouter un nouveau filtre
            function addFilter() {
                const filterId = Date.now();
                const filterHtml = `
                <div class="filter-container" data-filter-id="${filterId}">
                    <select class="form-select form-select-sm filter-column" style="width: 150px;">
                        ${Object.keys(columnData).map(col => 
                            `<option value="${col}">${col.replace('-', ' ').charAt(0).toUpperCase() + col.replace('-', ' ').slice(1)}</option>`
                        ).join('')}
                    </select>
                    <select class="form-select form-select-sm filter-operator" style="width: 180px;">
                        ${textOperators.map(op => `<option value="${op.id}">${op.text}</option>`).join('')}
                    </select>
                    <input type="text" class="form-control form-control-sm filter-value" placeholder="Valeur">
                    <button class="btn btn-danger btn-sm remove-filter" type="button">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
                `;
                $('#filterBuilder').append(filterHtml);

                // Mettre √† jour les op√©rateurs et les champs de valeur quand la colonne change
                $(`[data-filter-id="${filterId}"] .filter-column`).change(function() {
                    updateFilterInputs(filterId);
                }).trigger('change');

                // Mettre √† jour le champ de valeur quand l'op√©rateur change
                $(`[data-filter-id="${filterId}"] .filter-operator`).change(function() {
                    updateFilterInputs(filterId);
                });
            }

            // Mettre √† jour les inputs en fonction de la colonne et de l'op√©rateur s√©lectionn√©s
            function updateFilterInputs(filterId) {
                const container = $(`[data-filter-id="${filterId}"]`);
                const column = container.find('.filter-column').val();
                const operator = container.find('.filter-operator').val();
                const columnType = columnData[column].type;

                // Mettre √† jour les op√©rateurs disponibles
                let operators = textOperators;

                const operatorSelect = container.find('.filter-operator');
                const currentOperator = operatorSelect.val();
                operatorSelect.empty();
                operators.forEach(op => {
                    operatorSelect.append(`<option value="${op.id}">${op.text}</option>`);
                });

                // Conserver l'op√©rateur s√©lectionn√© si possible
                if (operators.some(op => op.id === currentOperator)) {
                    operatorSelect.val(currentOperator);
                }

                // Mettre √† jour le champ de valeur
                if (operator === 'empty' || operator === 'not_empty') {
                    container.find('.filter-value').hide();
                } else {
                    container.find('.filter-value').show();
                }
            }

            // Ajouter le premier filtre
            addFilter();

            // Ajouter un nouveau filtre quand on clique sur le bouton
            $('#addFilterBtn').click(addFilter);

            // Supprimer un filtre
            $('#filterBuilder').on('click', '.remove-filter', function() {
                $(this).closest('.filter-container').remove();
            });

            // Appliquer les filtres
            $('#applyFiltersBtn').click(function() {
                const filters = [];
                const logic = $('input[name="filterLogic"]:checked').val();
                const appartementType = $('input[name="appartementType"]:checked').val();

                $('.filter-container').each(function() {
                    const column = $(this).find('.filter-column').val();
                    const operator = $(this).find('.filter-operator').val();
                    const value1 = $(this).find('.filter-value').val();

                    if (operator === 'empty' || operator === 'not_empty') {
                        filters.push({ column, operator, logic });
                        return;
                    }

                    if (!value1) return;

                    filters.push({ column, operator, value1, logic });
                });

                applyFilters(filters, logic, appartementType);
            });

            // R√©initialiser les filtres
            $('#resetFiltersBtn').click(function() {
                $('#filterBuilder').empty();
                addFilter();
                $('input[name="appartementType"][value="all"]').prop('checked', true);
                $('table tbody tr').show();
            });

            // Fonction pour appliquer les filtres
            function applyFilters(filters, logic, appartementType) {
                $('table tbody tr').each(function() {
                    const row = $(this);
                    let matchResults = [];

                    // Filtrer d'abord par type d'appartement
                    if (appartementType !== 'all') {
                        const rowType = row.data('type');
                        if ((appartementType === 'loue' && rowType !== 'loue') || 
                            (appartementType === 'non_loue' && rowType !== 'non_loue')) {
                            row.hide();
                            return;
                        }
                    }

                    // Si aucun filtre, on affiche la ligne
                    if (filters.length === 0) {
                        row.show();
                        return;
                    }

                    filters.forEach(filter => {
                        const column = filter.column;
                        const operator = filter.operator;
                        let value = row.data(column);
                        let matches = false;

                        // G√©rer les cas vides
                        if (value === '' || value === null || value === undefined) {
                            if (operator === 'empty') matches = true;
                            else if (operator === 'not_empty') matches = false;
                            else matches = false;
                            
                            matchResults.push(matches);
                            return;
                        }

                        // Texte
                        value = String(value).toLowerCase();
                        const filterValue = String(filter.value1).toLowerCase();

                        switch(operator) {
                            case 'equals': matches = value === filterValue; break;
                            case 'not_equals': matches = value !== filterValue; break;
                            case 'contains': matches = value.includes(filterValue); break;
                            case 'not_contains': matches = !value.includes(filterValue); break;
                            case 'starts_with': matches = value.startsWith(filterValue); break;
                            case 'ends_with': matches = value.endsWith(filterValue); break;
                        }

                        matchResults.push(matches);
                    });

                    // Appliquer la logique AND ou OR
                    let shouldShow;
                    if (logic === 'AND') {
                        shouldShow = matchResults.length > 0 && matchResults.every(m => m);
                    } else { // OR
                        shouldShow = matchResults.some(m => m);
                    }

                    row.toggle(shouldShow);
                });
            }

            // Fonction pour collecter les donn√©es visibles
            function collectVisibleData() {
                const data = [];
                const headers = ['ID', 'Num√©ro', 'Type', '√âtage', 'Bloc', 'Occup√©', 'Locataire', 'Propri√©taire'];

                $('table tbody tr:visible').each(function() {
                    const row = $(this);
                    const rowData = {
                        ID: row.find('td').eq(0).text(),
                        Num√©ro: row.find('td').eq(1).text(),
                        Type: row.find('td').eq(2).text(),
                        √âtage: row.find('td').eq(3).text(),
                        Bloc: row.find('td').eq(4).text(),
                        Occup√©: row.find('td').eq(5).text().replace('‚úÖ', '').replace('‚ùå', '').trim(),
                        Locataire: row.find('td').eq(6).text(),
                        Propri√©taire: row.find('td').eq(7).text()
                    };
                    data.push(rowData);
                });

                return { headers, data };
            }

            // Exporter en PDF
            $('#exportPdfBtn').click(function() {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                const { headers, data } = collectVisibleData();

                // Ajouter un titre
                doc.setFontSize(18);
                doc.text('Liste des Appartements', 14, 22);

                // G√©n√©rer le tableau
                doc.autoTable({
                    head: [headers],
                    body: data.map(row => headers.map(header => row[header])),
                    startY: 30,
                    theme: 'striped',
                    headStyles: { fillColor: [100, 100, 100] },
                    styles: { fontSize: 10 }
                });

                // T√©l√©charger le PDF
                doc.save('appartements.pdf');
            });

            // Exporter en Excel
            $('#exportExcelBtn').click(function() {
                const { headers, data } = collectVisibleData();

                // Cr√©er une feuille de calcul
                const ws = XLSX.utils.json_to_sheet(data, { header: headers });

                // Cr√©er un classeur
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, 'Appartements');

                // T√©l√©charger le fichier Excel
                XLSX.writeFile(wb, 'appartements.xlsx');
            });
        });
    </script>
{% endblock %}