{% extends 'base.html.twig' %}

{% block title %}Liste des Frais Syndics{% endblock %}

{% block css %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <style>
        .filter-row th {
            padding: 8px 3px !important;
            vertical-align: top;
        }
        .filter-container {
            display: flex;
            gap: 5px;
            align-items: center;
            margin-bottom: 10px;
        }
        .filter-select {
            width: 100%;
            min-width: 120px;
        }
        .filter-input {
            width: 100%;
            min-width: 150px;
        }
        .btn-add-condition {
            margin-top: 5px;
        }
        .date-filter {
            display: none;
        }
        .logic-operator {
            font-weight: bold;
            margin: 0 10px;
        }
        .export-buttons {
            margin-bottom: 20px;
        }
        .nav-tabs {
            margin-bottom: 10px;
        }
        .paid-month {
            color: green;
        }
        .unpaid-month {
            color: red;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">üí∞ Frais Syndic</h1>

    <div class="mb-3 text-end">
        <a href="{{ path('app_cautionnement_new') }}" class="btn btn-success">‚ûï Nouveau</a>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtres Avanc√©s</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicAnd" value="AND" checked>
                    <label class="form-check-label" for="filterLogicAnd">Toutes les conditions (AND)</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicOr" value="OR">
                    <label class="form-check-label" for="filterLogicOr">Au moins une condition (OR)</label>
                </div>
            </div>
            
            <div id="filterBuilder">
                <!-- Les filtres seront ajout√©s ici dynamiquement -->
            </div>
            <button id="addFilterBtn" class="btn btn-primary btn-sm btn-add-condition mt-2">
                <i class="bi bi-plus"></i> Ajouter une condition
            </button>
            <button id="applyFiltersBtn" class="btn btn-success btn-sm mt-2">
                <i class="bi bi-funnel"></i> Appliquer les filtres
            </button>
            <button id="resetFiltersBtn" class="btn btn-danger btn-sm mt-2">
                <i class="bi bi-x-circle"></i> R√©initialiser
            </button>
        </div>
    </div>

    <div class="export-buttons text-end">
        <button id="exportPdfBtn" class="btn btn-danger btn-sm me-2">
            <i class="bi bi-file-pdf"></i> Exporter en PDF
        </button>
        <button id="exportExcelBtn" class="btn btn-success btn-sm">
            <i class="bi bi-file-excel"></i> Exporter en Excel
        </button>
    </div>

    <div class="alert alert-info">
        üíµ Total des Frais : <strong id="totalMontant">{{ totalMontant }} TND</strong>
    </div>

    <ul class="nav nav-tabs" id="yearTabs" role="tablist">
        {% for year, yearData in dataByYear %}
            <li class="nav-item" role="presentation">
                <button class="nav-link {% if loop.first %}active{% endif %}" id="year-{{ year }}-tab" data-bs-toggle="tab" data-bs-target="#year-{{ year }}" type="button" role="tab" aria-controls="year-{{ year }}" aria-selected="{{ loop.first ? 'true' : 'false' }}">{{ year }}</button>
            </li>
        {% endfor %}
    </ul>

    <div class="tab-content" id="yearTabContent">
        {% for year, yearData in dataByYear %}
            <div class="tab-pane fade {% if loop.first %}show active{% endif %}" id="year-{{ year }}" role="tabpanel" aria-labelledby="year-{{ year }}-tab">
                <div class="table-responsive">
                    <table id="cautionnementsTable-{{ year }}" class="table table-bordered table-hover align-middle">
                        <thead class="table-light">
                            <tr><th>Appartement</th>
                                <th>Propri√©taire</th>
                                
                                <th>Ann√©e</th>
                                <th>Janvier</th>
                                <th>F√©vrier</th>
                                <th>Mars</th>
                                <th>Avril</th>
                                <th>Mai</th>
                                <th>Juin</th>
                                <th>Juillet</th>
                                <th>Ao√ªt</th>
                                <th>Septembre</th>
                                <th>Octobre</th>
                                <th>Novembre</th>
                                <th>D√©cembre</th>
                                <th>Total</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for appartement, data in yearData %}
                                <tr data-nom="{{ data.nom }}"
                                    data-appartement="{{ data.appartement }}"
                                    data-proprietaire="{{ data.proprietaire }}"
                                    data-annee="{{ year }}"
                                    data-details="{{ data.details|json_encode }}">
                                     <td>{{ data.appartement }}</td>
                                    <td>{{ data.nom }}</td>
                                    <td>{{ year }}</td>
                                    {% for month in 1..12 %}
                                        <td class="text-center {% if data.months[month] == 'Oui' %}paid-month{% else %}unpaid-month{% endif %}">
                                            {% if data.months[month] == 'Oui' %}
                                                ‚úÖ
                                            {% else %}
                                                ‚ùå
                                            {% endif %}
                                        </td>
                                    {% endfor %}
                                    <td class="text-center">
                                        {% set total = 0 %}
                                        {% for detail in data.details %}
                                            {% set total = total + detail.montant %}
                                        {% endfor %}
                                        {{ total }} TND
                                    </td>
                                    <td>
                                        <a href="{{ path('app_cautionnement_show', {'id': data.details[0].id}) }}" class="btn btn-sm btn-outline-primary">Afficher</a>
                                        <a href="{{ path('app_cautionnement_edit', {'id': data.details[0].id}) }}" class="btn btn-sm btn-outline-secondary">Modifier</a>
                                    </td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="18" class="text-center">Aucun cautionnement trouv√© pour {{ year }}.</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        {% endfor %}
    </div>
</div>

<script type="text/javascript">
    const cautionnementsDataByYear = {
        {% for year, yearData in dataByYear %}
            "{{ year }}": [
                {% for appartement, data in yearData %}
                    {
                        nom: "{{ data.nom }}",
                        appartement: "{{ data.appartement }}",
                        proprietaire: "{{ data.proprietaire }}",
                        details: {{ data.details|json_encode|raw }},
                        months: {{ data.months|json_encode|raw }}
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
            ]{% if not loop.last %},{% endif %}
        {% endfor %}
    };
</script>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        $(document).ready(function() {
            // Donn√©es pour les colonnes
            const columnData = {
                nom: { type: 'text' },
                appartement: { type: 'text' },
                proprietaire: { type: 'text' },
                annee: { type: 'number' },
                montant: { type: 'number' },
                'nature-paiement': { type: 'text' },
                utilisateur: { type: 'text' }
            };
            
            // Op√©rateurs par type de colonne
            const textOperators = [
                { id: 'equals', text: '√âgal √†' },
                { id: 'not_equals', text: 'Diff√©rent de' },
                { id: 'contains', text: 'Contient' },
                { id: 'not_contains', text: 'Ne contient pas' },
                { id: 'starts_with', text: 'Commence par' },
                { id: 'ends_with', text: 'Finit par' },
                { id: 'empty', text: 'Est vide' },
                { id: 'not_empty', text: "N'est pas vide" }
            ];
            
            const numberOperators = [
                { id: 'equals', text: '√âgal √† (=)' },
                { id: 'not_equals', text: 'Diff√©rent de (!=)' },
                { id: 'greater', text: 'Sup√©rieur √† (>)' },
                { id: 'greater_equal', text: 'Sup√©rieur ou √©gal (>=)' },
                { id: 'less', text: 'Inf√©rieur √† (<)' },
                { id: 'less_equal', text: 'Inf√©rieur ou √©gal (<=)' },
                { id: 'empty', text: 'Est vide' },
                { id: 'not_empty', text: "N'est pas vide" }
            ];
            
            // Ajouter un nouveau filtre
            function addFilter() {
                const filterId = Date.now();
                const filterHtml = `
                <div class="filter-container" data-filter-id="${filterId}">
                    <select class="form-select form-select-sm filter-column" style="width: 150px;">
                        ${Object.keys(columnData).map(col => 
                            \`<option value="\${col}">\${col.replace('nature-paiement', 'Nature Paiement').replace('-', ' ').charAt(0).toUpperCase() + col.replace('nature-paiement', 'Nature Paiement').replace('-', ' ').slice(1)}</option>\`
                        ).join('')}
                    </select>
                    <select class="form-select form-select-sm filter-operator" style="width: 180px;">
                        ${textOperators.map(op => `<option value="${op.id}">${op.text}</option>`).join('')}
                    </select>
                    <input type="text" class="form-control form-control-sm filter-value" placeholder="Valeur" style="display: none;">
                    <input type="number" class="form-control form-control-sm filter-value-number number-filter" placeholder="Valeur num√©rique" style="display: none;">
                    <button class="btn btn-danger btn-sm remove-filter" type="button">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
                `;
                $('#filterBuilder').append(filterHtml);
                
                $(`[data-filter-id="${filterId}"] .filter-column`).change(function() {
                    updateFilterInputs(filterId);
                }).trigger('change');
                
                $(`[data-filter-id="${filterId}"] .filter-operator`).change(function() {
                    updateFilterInputs(filterId);
                });
            }
            
            function updateFilterInputs(filterId) {
                const container = $(`[data-filter-id="${filterId}"]`);
                const column = container.find('.filter-column').val();
                const operator = container.find('.filter-operator').val();
                const columnType = columnData[column].type;
                
                let operators;
                if (columnType === 'number') operators = numberOperators;
                else operators = textOperators;
                
                const operatorSelect = container.find('.filter-operator');
                const currentOperator = operatorSelect.val();
                operatorSelect.empty();
                operators.forEach(op => {
                    operatorSelect.append(`<option value="${op.id}">${op.text}</option>`);
                });
                
                if (operators.some(op => op.id === currentOperator)) {
                    operatorSelect.val(currentOperator);
                }
                
                container.find('.filter-value, .filter-value-number').hide();
                
                if (operator === 'empty' || operator === 'not_empty') {
                    // No value field needed
                } else {
                    if (columnType === 'number') {
                        container.find('.filter-value-number').show();
                    } else {
                        container.find('.filter-value').show();
                    }
                }
            }
            
            addFilter();
            
            $('#addFilterBtn').click(addFilter);
            
            $('#filterBuilder').on('click', '.remove-filter', function() {
                $(this).closest('.filter-container').remove();
            });
            
            $('#applyFiltersBtn').click(function() {
                const filters = [];
                const logic = $('input[name="filterLogic"]:checked').val();
                
                $('.filter-container').each(function() {
                    const column = $(this).find('.filter-column').val();
                    const operator = $(this).find('.filter-operator').val();
                    let value1;
                    
                    if (operator === 'empty' || operator === 'not_empty') {
                        filters.push({ column, operator, logic });
                        return;
                    }
                    
                    if (columnData[column].type === 'number') {
                        value1 = $(this).find('.filter-value-number').val();
                    } else {
                        value1 = $(this).find('.filter-value').val();
                    }
                    if (!value1) return;
                    
                    filters.push({ column, operator, value1, logic });
                });
                
                applyFilters(filters, logic);
            });
            
            $('#resetFiltersBtn').click(function() {
                $('#filterBuilder').empty();
                addFilter();
                $('.tab-pane table tbody tr').show();
                updateTotalMontant();
            });
            
            function applyFilters(filters, logic) {
                if (filters.length === 0) {
                    $('.tab-pane table tbody tr').show();
                    updateTotalMontant();
                    return;
                }
                
                $('.tab-pane').each(function() {
                    const year = $(this).attr('id').replace('year-', '');
                    const yearData = cautionnementsDataByYear[year] || [];
                    
                    $(this).find('tbody tr').each(function() {
                        const row = $(this);
                        const rowNom = row.data('nom');
                        const rowAppartement = row.data('appartement');
                        const rowProprietaire = row.data('proprietaire');
                        const rowAnnee = row.data('annee');
                        const details = JSON.parse(row.data('details'));
                        let matchResults = [];
                        
                        filters.forEach(filter => {
                            const column = filter.column;
                            const operator = filter.operator;
                            let matches = false;
                            
                            // Handle direct row data (nom, appartement, proprietaire, annee)
                            if (['nom', 'appartement', 'proprietaire', 'annee'].includes(column)) {
                                let value = row.data(column);
                                if (value === '' || value === null || value === undefined) {
                                    if (operator === 'empty') matches = true;
                                    else if (operator === 'not_empty') matches = false;
                                    else matches = false;
                                    matchResults.push(matches);
                                    return;
                                }
                                
                                if (column === 'annee') {
                                    value = parseFloat(value);
                                    const filterValue = parseFloat(filter.value1);
                                    switch(operator) {
                                        case 'equals': matches = value === filterValue; break;
                                        case 'not_equals': matches = value !== filterValue; break;
                                        case 'greater': matches = value > filterValue; break;
                                        case 'greater_equal': matches = value >= filterValue; break;
                                        case 'less': matches = value < filterValue; break;
                                        case 'less_equal': matches = value <= filterValue; break;
                                    }
                                } else {
                                    value = String(value).toLowerCase();
                                    const filterValue = String(filter.value1).toLowerCase();
                                    switch(operator) {
                                        case 'equals': matches = value === filterValue; break;
                                        case 'not_equals': matches = value !== filterValue; break;
                                        case 'contains': matches = value.includes(filterValue); break;
                                        case 'not_contains': matches = !value.includes(filterValue); break;
                                        case 'starts_with': matches = value.startsWith(filterValue); break;
                                        case 'ends_with': matches = value.endsWith(filterValue); break;
                                    }
                                }
                                matchResults.push(matches);
                                return;
                            }
                            
                            // Handle detailed data (montant, nature-paiement, utilisateur)
                            let detailMatches = details.map(detail => {
                                let value = detail[column];
                                if (value === '' || value === null || value === undefined) {
                                    if (operator === 'empty') return true;
                                    else if (operator === 'not_empty') return false;
                                    else return false;
                                }
                                
                                if (columnData[column].type === 'number') {
                                    value = parseFloat(value);
                                    const filterValue = parseFloat(filter.value1);
                                    switch(operator) {
                                        case 'equals': return value === filterValue;
                                        case 'not_equals': return value !== filterValue;
                                        case 'greater': return value > filterValue;
                                        case 'greater_equal': return value >= filterValue;
                                        case 'less': return value < filterValue;
                                        case 'less_equal': return value <= filterValue;
                                        case 'empty': return isNaN(value);
                                        case 'not_empty': return !isNaN(value);
                                    }
                                } else {
                                    value = String(value).toLowerCase();
                                    const filterValue = String(filter.value1).toLowerCase();
                                    switch(operator) {
                                        case 'equals': return value === filterValue;
                                        case 'not_equals': return value !== filterValue;
                                        case 'contains': return value.includes(filterValue);
                                        case 'not_contains': return !value.includes(filterValue);
                                        case 'starts_with': return value.startsWith(filterValue);
                                        case 'ends_with': return value.endsWith(filterValue);
                                    }
                                }
                                return false;
                            });
                            
                            matches = detailMatches.some(m => m);
                            matchResults.push(matches);
                        });
                        
                        let shouldShow;
                        if (logic === 'AND') {
                            shouldShow = matchResults.length > 0 && matchResults.every(m => m);
                        } else {
                            shouldShow = matchResults.some(m => m);
                        }
                        
                        row.toggle(shouldShow);
                    });
                });
                
                updateTotalMontant();
            }

            function updateTotalMontant() {
                let total = 0;
                $('.tab-pane.show.active table tbody tr:visible').each(function() {
                    const details = JSON.parse($(this).data('details'));
                    details.forEach(detail => {
                        const montant = parseFloat(detail.montant);
                        if (!isNaN(montant)) {
                            total += montant;
                        }
                    });
                });
                total = total.toFixed(2);
                $('#totalMontant').text(total + ' TND');
            }

            function collectVisibleData(year) {
                const data = [];
                const headers = ['Nom', 'Appartement', 'Propri√©taire', 'Ann√©e', 'Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre', 'Total'];
                
                $(`#cautionnementsTable-${year} tbody tr:visible`).each(function() {
                    const row = $(this);
                    const rowData = {
                        'Nom': row.find('td').eq(0).text(),
                        'Appartement': row.find('td').eq(1).text(),
                        'Propri√©taire': row.find('td').eq(2).text(),
                        'Ann√©e': row.find('td').eq(3).text(),
                        'Janvier': row.find('td').eq(4).text(),
                        'F√©vrier': row.find('td').eq(5).text(),
                        'Mars': row.find('td').eq(6).text(),
                        'Avril': row.find('td').eq(7).text(),
                        'Mai': row.find('td').eq(8).text(),
                        'Juin': row.find('td').eq(9).text(),
                        'Juillet': row.find('td').eq(10).text(),
                        'Ao√ªt': row.find('td').eq(11).text(),
                        'Septembre': row.find('td').eq(12).text(),
                        'Octobre': row.find('td').eq(13).text(),
                        'Novembre': row.find('td').eq(14).text(),
                        'D√©cembre': row.find('td').eq(15).text(),
                        'Total': row.find('td').eq(16).text()
                    };
                    data.push(rowData);
                });

                return { headers, data };
            }

            $('#exportPdfBtn').click(function() {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                const activeYear = $('#yearTabs .nav-link.active').text();
                const { headers, data } = collectVisibleData(activeYear);

                doc.setFontSize(18);
                doc.text(`Frais Syndic - ${activeYear}`, 14, 22);

                doc.autoTable({
                    head: [headers],
                    body: data.map(row => headers.map(header => row[header])),
                    startY: 30,
                    theme: 'striped',
                    headStyles: { fillColor: [100, 100, 100] },
                    styles: { fontSize: 10 }
                });

                doc.save(`frais-syndic-${activeYear}.pdf`);
            });

            $('#exportExcelBtn').click(function() {
                const activeYear = $('#yearTabs .nav-link.active').text();
                const { headers, data } = collectVisibleData(activeYear);

                const ws = XLSX.utils.json_to_sheet(data, { header: headers });
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, 'Frais Syndics');
                XLSX.writeFile(wb, `frais-syndic-${activeYear}.xlsx`);
            });

            updateTotalMontant();
        });
    </script>
{% endblock %}