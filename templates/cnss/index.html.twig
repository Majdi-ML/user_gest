{% extends 'base.html.twig' %}

{% block title %}Liste des D√©clarations CNSS{% endblock %}

{% block css %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <style>
        .filter-row th {
            padding: 8px 3px !important;
            vertical-align: top;
        }
        .filter-container {
            display: flex;
            gap: 5px;
            align-items: center;
            margin-bottom: 10px;
        }
        .filter-select {
            width: 100%;
            min-width: 120px;
        }
        .filter-input {
            width: 100%;
            min-width: 150px;
        }
        .btn-add-condition {
            margin-top: 5px;
        }
        .logic-operator {
            font-weight: bold;
            margin: 0 10px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">üìã Liste des D√©clarations CNSS</h1>

    <div class="mb-3 text-end">
        <a href="{{ path('app_cnss_new') }}" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Nouvelle d√©claration
        </a>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtres Avanc√©s</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicAnd" value="AND" checked>
                    <label class="form-check-label" for="filterLogicAnd">Toutes les conditions (AND)</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicOr" value="OR">
                    <label class="form-check-label" for="filterLogicOr">Au moins une condition (OR)</label>
                </div>
            </div>
            
            <div id="filterBuilder">
                <!-- Les filtres seront ajout√©s ici dynamiquement -->
            </div>
            <button id="addFilterBtn" class="btn btn-primary btn-sm btn-add-condition mt-2">
                <i class="bi bi-plus"></i> Ajouter une condition
            </button>
            <button id="applyFiltersBtn" class="btn btn-success btn-sm mt-2">
                <i class="bi bi-funnel"></i> Appliquer les filtres
            </button>
            <button id="resetFiltersBtn" class="btn btn-danger btn-sm mt-2">
                <i class="bi bi-x-circle"></i> R√©initialiser
            </button>
        </div>
    </div>

    <div class="table-responsive">
        <table id="cnssTable" class="table table-bordered table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Trimestre</th>
                    <th>Ann√©e</th>
                    <th>Montant (DT)</th>
                    <th>Responsable</th>
                    <th>Document</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            {% for cnss in cnsses %}
                <tr data-id="{{ cnss.id }}"
                    data-trimestre="{{ cnss.trimstre }}"
                    data-annee="{{ cnss.annee }}"
                    data-montant="{{ cnss.montantTotale }}"
                    data-responsable="{{ cnss.employe ? cnss.employe.nom ~ ' ' ~ cnss.employe.prenom : '' }}"
                    data-document="{{ cnss.attachedFile ? 'true' : 'false' }}">
                    <td>{{ cnss.id }}</td>
                    <td>{{ cnss.trimstre }}√®me trimestre</td>
                    <td>{{ cnss.annee }}</td>
                    <td>{{ cnss.montantTotale|number_format(3, '.', ' ') }}</td>
                    <td>{{ cnss.employe ? cnss.employe.nom ~ ' ' ~ cnss.employe.prenom : '‚Äî' }}</td>
                    <td>
                        {% if cnss.attachedFile %}
                            <span class="badge bg-success">Document joint</span>
                        {% else %}
                            <span class="badge bg-secondary">Aucun document</span>
                        {% endif %}
                    </td>
                    <td>
                        <div class="btn-group" role="group">
                            <a href="{{ path('app_cnss_show', {'id': cnss.id}) }}" class="btn btn-sm btn-primary">
                                <i class="bi bi-eye"></i>
                            </a>
                            <a href="{{ path('app_cnss_edit', {'id': cnss.id}) }}" class="btn btn-sm btn-warning">
                                <i class="bi bi-pencil"></i>
                            </a>
                        </div>
                    </td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="7" class="text-center text-muted">Aucune d√©claration trouv√©e</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
    <script>
        $(document).ready(function() {
            // Donn√©es pour les colonnes
            const columnData = {
                id: { type: 'number' },
                trimestre: { type: 'number' },
                annee: { type: 'number' },
                montant: { type: 'number' },
                responsable: { type: 'text' },
                document: { type: 'boolean' }
            };
            
            // Op√©rateurs par type de colonne
            const textOperators = [
                { id: 'equals', text: '√âgal √†' },
                { id: 'not_equals', text: 'Diff√©rent de' },
                { id: 'contains', text: 'Contient' },
                { id: 'not_contains', text: 'Ne contient pas' },
                { id: 'starts_with', text: 'Commence par' },
                { id: 'ends_with', text: 'Finit par' },
                { id: 'empty', text: 'Est vide' },
                { id: 'not_empty', text: "N'est pas vide" }
            ];
            
            const numberOperators = [
                { id: 'equals', text: '√âgal √† (=)' },
                { id: 'not_equals', text: 'Diff√©rent de (!=)' },
                { id: 'greater', text: 'Sup√©rieur √† (>)' },
                { id: 'greater_equal', text: 'Sup√©rieur ou √©gal (>=)' },
                { id: 'less', text: 'Inf√©rieur √† (<)' },
                { id: 'less_equal', text: 'Inf√©rieur ou √©gal (<=)' },
                { id: 'empty', text: 'Est vide' },
                { id: 'not_empty', text: "N'est pas vide" }
            ];
            
            const booleanOperators = [
                { id: 'is_true', text: 'Document joint (‚úÖ)' },
                { id: 'is_false', text: 'Aucun document (‚ùå)' }
            ];
            
            // Ajouter un nouveau filtre
            function addFilter() {
                const filterId = Date.now();
                const filterHtml = `
                <div class="filter-container" data-filter-id="${filterId}">
                    <select class="form-select form-select-sm filter-column" style="width: 150px;">
                        ${Object.keys(columnData).map(col => 
                            `<option value="${col}">${col.charAt(0).toUpperCase() + col.slice(1).replace('annee', 'Ann√©e')}</option>`
                        ).join('')}
                    </select>
                    <select class="form-select form-select-sm filter-operator" style="width: 180px;">
                        ${textOperators.map(op => `<option value="${op.id}">${op.text}</option>`).join('')}
                    </select>
                    <input type="text" class="form-control form-control-sm filter-value" placeholder="Valeur" style="display: none;">
                    <input type="number" class="form-control form-control-sm filter-value-number number-filter" placeholder="Valeur num√©rique" style="display: none;">
                    <select class="form-select form-select-sm filter-value-boolean boolean-filter" style="display: none; width: 150px;">
                        <option value="true">Document joint (‚úÖ)</option>
                        <option value="false">Aucun document (‚ùå)</option>
                    </select>
                    <button class="btn btn-danger btn-sm remove-filter" type="button">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
                `;
                $('#filterBuilder').append(filterHtml);
                
                // Mettre √† jour les op√©rateurs et les champs de valeur quand la colonne change
                $(`[data-filter-id="${filterId}"] .filter-column`).change(function() {
                    updateFilterInputs(filterId);
                }).trigger('change');
                
                // Mettre √† jour le champ de valeur quand l'op√©rateur change
                $(`[data-filter-id="${filterId}"] .filter-operator`).change(function() {
                    updateFilterInputs(filterId);
                });
            }
            
            // Mettre √† jour les inputs en fonction de la colonne et de l'op√©rateur s√©lectionn√©s
            function updateFilterInputs(filterId) {
                const container = $(`[data-filter-id="${filterId}"]`);
                const column = container.find('.filter-column').val();
                const operator = container.find('.filter-operator').val();
                const columnType = columnData[column].type;
                
                // Mettre √† jour les op√©rateurs disponibles
                let operators;
                if (columnType === 'number') operators = numberOperators;
                else if (columnType === 'boolean') operators = booleanOperators;
                else operators = textOperators;
                
                const operatorSelect = container.find('.filter-operator');
                const currentOperator = operatorSelect.val();
                operatorSelect.empty();
                operators.forEach(op => {
                    operatorSelect.append(`<option value="${op.id}">${op.text}</option>`);
                });
                
                // Conserver l'op√©rateur s√©lectionn√© si possible
                if (operators.some(op => op.id === currentOperator)) {
                    operatorSelect.val(currentOperator);
                }
                
                // Mettre √† jour le champ de valeur
                container.find('.filter-value, .filter-value-number, .filter-value-boolean').hide();
                
                if (operator !== 'empty' && operator !== 'not_empty' && operator !== 'is_true' && operator !== 'is_false') {
                    if (columnType === 'number') {
                        container.find('.filter-value-number').show();
                    } else if (columnType === 'boolean') {
                        container.find('.filter-value-boolean').show();
                    } else {
                        container.find('.filter-value').show();
                    }
                }
            }
            
            // Ajouter le premier filtre
            addFilter();
            
            // Ajouter un nouveau filtre quand on clique sur le bouton
            $('#addFilterBtn').click(addFilter);
            
            // Supprimer un filtre
            $('#filterBuilder').on('click', '.remove-filter', function() {
                $(this).closest('.filter-container').remove();
            });
            
            // Appliquer les filtres
            $('#applyFiltersBtn').click(function() {
                const filters = [];
                const logic = $('input[name="filterLogic"]:checked').val();
                
                $('.filter-container').each(function() {
                    const column = $(this).find('.filter-column').val();
                    const operator = $(this).find('.filter-operator').val();
                    let value1;
                    
                    if (operator === 'empty' || operator === 'not_empty' || operator === 'is_true' || operator === 'is_false') {
                        filters.push({ column, operator, logic });
                        return;
                    }
                    
                    if (columnData[column].type === 'number') {
                        value1 = $(this).find('.filter-value-number').val();
                    } else if (columnData[column].type === 'boolean') {
                        value1 = $(this).find('.filter-value-boolean').val();
                    } else {
                        value1 = $(this).find('.filter-value').val();
                    }
                    if (!value1) return;
                    
                    filters.push({ column, operator, value1, logic });
                });
                
                applyFilters(filters, logic);
            });
            
            // R√©initialiser les filtres
            $('#resetFiltersBtn').click(function() {
                $('#filterBuilder').empty();
                addFilter();
                $('#cnssTable tbody tr').show();
            });
            
            // Fonction pour appliquer les filtres
            function applyFilters(filters, logic) {
                if (filters.length === 0) {
                    $('#cnssTable tbody tr').show();
                    return;
                }
                
                $('#cnssTable tbody tr').each(function() {
                    const row = $(this);
                    let matchResults = [];
                    
                    filters.forEach(filter => {
                        const column = filter.column;
                        const operator = filter.operator;
                        let value = row.data(column);
                        let matches = false;
                        
                        // G√©rer les cas vides
                        if (value === '' || value === null || value === undefined) {
                            if (operator === 'empty') matches = true;
                            else if (operator === 'not_empty') matches = false;
                            else matches = false;
                            
                            matchResults.push(matches);
                            return;
                        }
                        
                        // Convertir les valeurs selon le type
                        if (columnData[column].type === 'number') {
                            value = parseFloat(value);
                            const filterValue = parseFloat(filter.value1);
                            
                            switch(operator) {
                                case 'equals': matches = value === filterValue; break;
                                case 'not_equals': matches = value !== filterValue; break;
                                case 'greater': matches = value > filterValue; break;
                                case 'greater_equal': matches = value >= filterValue; break;
                                case 'less': matches = value < filterValue; break;
                                case 'less_equal': matches = value <= filterValue; break;
                                case 'empty': matches = isNaN(value); break;
                                case 'not_empty': matches = !isNaN(value); break;
                            }
                        } 
                        else if (columnData[column].type === 'boolean') {
                            value = String(value).toLowerCase() === 'true';
                            const filterValue = filter.value1.toLowerCase() === 'true';
                            
                            switch(operator) {
                                case 'is_true': matches = value === true; break;
                                case 'is_false': matches = value === false; break;
                            }
                        } 
                        else {
                            // Texte
                            value = String(value).toLowerCase();
                            const filterValue = String(filter.value1).toLowerCase();
                            
                            switch(operator) {
                                case 'equals': matches = value === filterValue; break;
                                case 'not_equals': matches = value !== filterValue; break;
                                case 'contains': matches = value.includes(filterValue); break;
                                case 'not_contains': matches = !value.includes(filterValue); break;
                                case 'starts_with': matches = value.startsWith(filterValue); break;
                                case 'ends_with': matches = value.endsWith(filterValue); break;
                            }
                        }
                        
                        matchResults.push(matches);
                    });
                    
                    // Appliquer la logique AND ou OR
                    let shouldShow;
                    if (logic === 'AND') {
                        shouldShow = matchResults.length > 0 && matchResults.every(m => m);
                    } else { // OR
                        shouldShow = matchResults.some(m => m);
                    }
                    
                    row.toggle(shouldShow);
                });
            }
        });
    </script>
{% endblock %}