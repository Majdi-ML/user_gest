{% extends 'base.html.twig' %}

{% block title %}Liste des DÃ©penses{% endblock %}

{% block css %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <style>
        .filter-row th { padding: 8px 3px !important; vertical-align: top; }
        .filter-container { display: flex; gap: 5px; align-items: center; margin-bottom: 10px; }
        .filter-select { width: 100%; min-width: 120px; }
        .filter-input { width: 100%; min-width: 150px; }
        .btn-add-condition { margin-top: 5px; }
        .date-filter { display: none; }
        .logic-operator { font-weight: bold; margin: 0 10px; }
        .export-buttons { margin-bottom: 20px; }
        .nav-tabs { margin-bottom: 10px; }
        .clickable-header { cursor: pointer; color: #007bff; }
        .clickable-header:hover { text-decoration: underline; }
    </style>
{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">ðŸ’¸ Liste des DÃ©penses</h1>

    <div class="mb-3 text-end">
        <a href="{{ path('app_depense_new') }}" class="btn btn-success">âž• Ajouter une DÃ©pense</a>
    </div>

    <div class="mb-3 text-end export-buttons">
        <button id="exportPdfBtn" class="btn btn-danger btn-sm me-2">
            <i class="bi bi-file-pdf"></i> Exporter en PDF
        </button>
        <button id="exportExcelBtn" class="btn btn-success btn-sm">
            <i class="bi bi-file-excel"></i> Exporter en Excel
        </button>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtres AvancÃ©s</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicAnd" value="AND" checked>
                    <label class="form-check-label" for="filterLogicAnd">Toutes les conditions (AND)</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="filterLogic" id="filterLogicOr" value="OR">
                    <label class="form-check-label" for="filterLogicOr">Au moins une condition (OR)</label>
                </div>
            </div>
            
            <div id="filterBuilder">
                <!-- Les filtres seront ajoutÃ©s ici dynamiquement -->
            </div>
            <button id="addFilterBtn" class="btn btn-primary btn-sm btn-add-condition mt-2">
                <i class="bi bi-plus"></i> Ajouter une condition
            </button>
            <button id="applyFiltersBtn" class="btn btn-success btn-sm mt-2">
                <i class="bi bi-funnel"></i> Appliquer les filtres
            </button>
            <button id="resetFiltersBtn" class="btn btn-danger btn-sm mt-2">
                <i class="bi bi-x-circle"></i> RÃ©initialiser
            </button>
        </div>
    </div>

    <ul class="nav nav-tabs" id="yearTabs" role="tablist">
        {% for year, yearDepenses in depensesByYear %}
            <li class="nav-item" role="presentation">
                <button class="nav-link {% if loop.first %}active{% endif %}" id="year-{{ year }}-tab" data-bs-toggle="tab" data-bs-target="#year-{{ year }}" type="button" role="tab" aria-controls="year-{{ year }}" aria-selected="{{ loop.first ? 'true' : 'false' }}">{{ year }}</button>
            </li>
        {% endfor %}
    </ul>

    <div class="tab-content" id="yearTabContent">
        {% for year, yearDepenses in depensesByYear %}
            <div class="tab-pane fade {% if loop.first %}show active{% endif %}" id="year-{{ year }}" role="tabpanel" aria-labelledby="year-{{ year }}-tab">
                <table id="depensesTable-{{ year }}" class="table table-bordered table-striped">
                    <thead class="table-light">
                        <tr>
                            <th>Mois</th>
                            <th class="clickable-header" data-type="SALAIRE">Salaire</th>
                            <th class="clickable-header" data-type="CNSS">CNSS</th>
                            <th class="clickable-header" data-type="STEG">STEG</th>
                            <th class="clickable-header" data-type="SONEDE">SONEDE</th>
                            <th class="clickable-header" data-type="IMPOTS">ImpÃ´ts</th>
                            <th class="clickable-header" data-type="JARDINAGE">Jardinage</th>
                            <th class="clickable-header" data-type="PRODUITS_ENTRETIEN">Produits d'Entretien</th>
                            <th class="clickable-header" data-type="GROS_Å’UVRES_ENTRETIEN">Gros Å’uvres & Entretien</th>
                            <th class="clickable-header" data-type="FRAIS_JURIDIQUE">Frais Juridique</th>
                            <th class="clickable-header" data-type="DIVERS">Divers</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% set annualTotal = 0 %}
                        {% for month, expenses in yearDepenses|sort %}
                            {% set monthlyTotal = (expenses['SALAIRE']|default(0) + expenses['CNSS']|default(0) + expenses['STEG']|default(0) + expenses['SONEDE']|default(0) + expenses['IMPOTS']|default(0) + expenses['JARDINAGE']|default(0) + expenses['PRODUITS D\'ENTRETIEN']|default(0) + expenses['GROS Å’UVRES & ENTRETIEN']|default(0) + expenses['FRAIS JURIDIQUE']|default(0) + expenses['DIVERS']|default(0)) %}
                            <tr>
                                <td>{{ month }}</td>
                                <td>{{ expenses['SALAIRE']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['CNSS']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['STEG']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['SONEDE']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['IMPOTS']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['JARDINAGE']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['PRODUITS_ENTRETIEN']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['GROS_Å’UVRES_ENTRETIEN']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['FRAIS_JURIDIQUE']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ expenses['DIVERS']|default(0)|number_format(2, '.', ',') }}</td>
                                <td>{{ monthlyTotal|number_format(2, '.', ',') }}</td>
                            </tr>
                            {% set annualTotal = annualTotal + monthlyTotal %}
                        {% else %}
                            <tr>
                                <td colspan="12" class="text-center text-muted">Aucune dÃ©pense trouvÃ©e pour {{ year }}.</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                    {% if yearDepenses|length > 0 %}
                        <tfoot>
                            <tr class="table-info fw-bold">
                                <td colspan="11">Total {{ year }}</td>
                                <td>{{ annualTotal|number_format(2, '.', ',') }}</td>
                            </tr>
                        </tfoot>
                    {% endif %}
                </table>
            </div>
        {% endfor %}
    </div>

    <!-- Modal for displaying expenses by type -->
    <div class="modal fade" id="expenseModal" tabindex="-1" aria-labelledby="expenseModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="expenseModalLabel">DÃ©penses par Type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Montant</th>
                                <th>Date DÃ©pense</th>
                                <th>Description</th>
                                <th>Type</th>
                                <th>Fichier Joint</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="expenseModalBody">
                            <!-- Content will be populated dynamically -->
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Pass depenses data to JavaScript -->
<script type="text/javascript">
    const depensesData = [
        {% for depense in depenses %}
            {
                id: {{ depense.id }},
                montant: {{ depense.montant }},
                dateDepense: "{{ depense.dateDepense ? depense.dateDepense|date('Y-m-d') : '' }}",
                description: "{{ depense.description|default('') }}",
                type: "{{ depense.type }}",
                attachedFile: "{{ depense.attachedFile|default('') }}",
                csrfToken: "{{ csrf_token('delete' ~ depense.id) }}"
            }{% if not loop.last %},{% endif %}
        {% endfor %}
    ];
    console.log('depensesData:', depensesData);

    const deleteRoute = "{{ path('app_depense_delete', {'id': 'placeholder'}) }}".replace('placeholder', '');
</script>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        $(document).ready(function() {
            // Filter setup (simplified, adjust as needed)
            const columnData = {
                mois: { type: 'text' },
                salaire: { type: 'number' },
                cnss: { type: 'number' },
                steg: { type: 'number' },
                sonede: { type: 'number' },
                impots: { type: 'number' },
                jardinage: { type: 'number' },
                'produits d\'entretien': { type: 'number' },
                'gros Å“uvres & entretien': { type: 'number' },
                'frais juridique': { type: 'number' },
                divers: { type: 'number' },
                total: { type: 'number' }
            };

            const textOperators = [
                { id: 'equals', text: 'Ã‰gal Ã ' }, { id: 'contains', text: 'Contient' }
            ];
            const numberOperators = [
                { id: 'equals', text: 'Ã‰gal Ã ' }, { id: 'greater', text: 'SupÃ©rieur Ã ' }
            ];

            function addFilter() {
                const filterId = Date.now();
                const filterHtml = `
                    <div class="filter-container" data-filter-id="${filterId}">
                        <select class="form-select form-select-sm filter-column" style="width: 150px;">
                            ${Object.keys(columnData).map(col => `<option value="${col}">${col.charAt(0).toUpperCase() + col.slice(1)}</option>`).join('')}
                        </select>
                        <select class="form-select form-select-sm filter-operator" style="width: 180px;">
                            ${textOperators.map(op => `<option value="${op.id}">${op.text}</option>`).join('')}
                        </select>
                        <input type="text" class="form-control form-control-sm filter-value" placeholder="Valeur" style="display: none;">
                        <input type="number" class="form-control form-control-sm filter-value-number number-filter" placeholder="Valeur numÃ©rique" style="display: none;">
                        <button class="btn btn-danger btn-sm remove-filter" type="button"><i class="bi bi-trash"></i></button>
                    </div>
                `;
                $('#filterBuilder').append(filterHtml);

                $(`[data-filter-id="${filterId}"] .filter-column`).change(function() {
                    updateFilterInputs(filterId);
                }).trigger('change');
            }

            function updateFilterInputs(filterId) {
                const container = $(`[data-filter-id="${filterId}"]`);
                const column = container.find('.filter-column').val();
                const operator = container.find('.filter-operator').val();
                const operators = columnData[column].type === 'number' ? numberOperators : textOperators;

                container.find('.filter-operator').empty().append(operators.map(op => `<option value="${op.id}">${op.text}</option>`));
                container.find('.filter-value, .filter-value-number').hide();
                if (operator !== 'empty' && operator !== 'not_empty') {
                    if (columnData[column].type === 'number') container.find('.filter-value-number').show();
                    else container.find('.filter-value').show();
                }
            }

            addFilter();
            $('#addFilterBtn').click(addFilter);
            $('#filterBuilder').on('click', '.remove-filter', function() { $(this).closest('.filter-container').remove(); });
            $('#applyFiltersBtn').click(function() {
                const filters = []; const logic = $('input[name="filterLogic"]:checked').val();
                $('.filter-container').each(function() {
                    const column = $(this).find('.filter-column').val();
                    const operator = $(this).find('.filter-operator').val();
                    const value = columnData[column].type === 'number' ? $(this).find('.filter-value-number').val() : $(this).find('.filter-value').val();
                    if (value) filters.push({ column, operator, value, logic });
                });
                applyFilters(filters, logic);
            });
            $('#resetFiltersBtn').click(function() {
                $('#filterBuilder').empty(); addFilter();
                $('.tab-pane table tbody tr').show();
            });

            function applyFilters(filters, logic) {
                $('.tab-pane').each(function() {
                    $(this).find('tbody tr').each(function() {
                        const row = $(this); let match = logic === 'AND';
                        filters.forEach(filter => {
                            const val = row.find('td').eq(Object.keys(columnData).indexOf(filter.column)).text().replace(',', '.');
                            const matches = filter.operator === 'equals' ? val === filter.value : filter.operator === 'greater' ? parseFloat(val) > parseFloat(filter.value) : val.includes(filter.value);
                            match = logic === 'AND' ? match && matches : match || matches;
                        });
                        row.toggle(match);
                    });
                });
            }

            // Export functions
            function collectVisibleData(year) {
                const data = []; const headers = Object.keys(columnData);
                $('#depensesTable-' + year + ' tbody tr:visible').each(function() {
                    const row = $(this); const rowData = {};
                    row.find('td').each(function(i) { rowData[headers[i]] = $(this).text(); });
                    data.push(rowData);
                });
                const total = $('#depensesTable-' + year + ' tfoot td:last').text();
                if (total) data.push({ mois: 'Total ' + year, [headers.slice(-1)[0]]: total });
                return { headers, data };
            }

            $('#exportPdfBtn').click(function() {
                const { jsPDF } = window.jspdf; const doc = new jsPDF();
                const activeYear = $('#yearTabs .nav-link.active').text();
                const { headers, data } = collectVisibleData(activeYear);
                doc.text('Liste des DÃ©penses - ' + activeYear, 14, 22);
                doc.autoTable({ head: [headers], body: data.map(row => headers.map(h => row[h])), startY: 30 });
                doc.save('depenses-' + activeYear + '.pdf');
            });

            $('#exportExcelBtn').click(function() {
                const activeYear = $('#yearTabs .nav-link.active').text();
                const { headers, data } = collectVisibleData(activeYear);
                const ws = XLSX.utils.json_to_sheet(data, { header: headers });
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, 'DÃ©penses');
                XLSX.writeFile(wb, 'depenses-' + activeYear + '.xlsx');
            });

            // Modal functionality for column types
            $('.clickable-header').click(function() {
                console.log('Clicked on:', $(this).data('type'));
                const type = $(this).data('type');
                const activeYear = $('#yearTabs .nav-link.active').text();
                console.log('Active Year:', activeYear);

                // Normalize strings for comparison
                const normalizeString = (str) => {
                    return str.trim().replace(/[\u2018\u2019]/g, "'"); // Replace curly quotes with straight quotes
                };

                // Filter expenses by type and year
                const filteredDepenses = depensesData.filter(depense => {
                    const typeMatch = normalizeString(depense.type).toUpperCase() === normalizeString(type).toUpperCase();
                    const yearMatch = depense.dateDepense && depense.dateDepense.split('-')[0] === activeYear;
                    console.log(`Depense: ${JSON.stringify(depense)}, Type Match: ${typeMatch}, Year Match: ${yearMatch}`);
                    return typeMatch && yearMatch;
                });
                console.log('Filtered Depenses for ' + type + ':', filteredDepenses);

                // Populate the modal
                $('#expenseModalLabel').text(`DÃ©penses de type ${type} pour ${activeYear}`);
                const modalBody = $('#expenseModalBody');
                modalBody.empty();

                if (filteredDepenses.length === 0) {
                    modalBody.append('<tr><td colspan="6" class="text-center">Aucune dÃ©pense trouvÃ©e.</td></tr>');
                } else {
                    filteredDepenses.forEach(depense => {
                        const fileCell = depense.attachedFile ? (
                            depense.attachedFile.endsWith('.pdf') ?
                            `<a href="/uploads/depenses/${depense.attachedFile}" target="_blank"><i class="fas fa-file-pdf"></i> Voir le PDF</a>` :
                            `<a href="/uploads/depenses/${depense.attachedFile}" target="_blank"><img src="/uploads/depenses/${depense.attachedFile}" alt="Fichier joint" style="max-height: 200px;"></a>`
                        ) : 'Aucun fichier joint';

                        const deleteForm = `
                            <form method="post" action="${deleteRoute}${depense.id}" class="delete-form d-inline">
                                <input type="hidden" name="_token" value="${depense.csrfToken}">
                                <button type="submit" class="btn btn-sm btn-danger btn-delete" onclick="return confirm('ÃŠtes-vous sÃ»r de vouloir supprimer cette dÃ©pense ?');">
                                    <i class="bi bi-trash"></i> Supprimer
                                </button>
                            </form>
                        `;

                        modalBody.append(`
                            <tr>
                                <td>${depense.montant}</td>
                                <td>${depense.dateDepense}</td>
                                <td>${depense.description || 'â€”'}</td>
                                <td>${depense.type}</td>
                                <td>${fileCell}</td>
                                <td>
                                   
                                     <a href="/depense/${depense.id}" class="btn btn-sm btn-primary"><i class="fas fa-eye"></i> Voir</a>
                                </td>
                            </tr>
                        `);
                    });
                }

                $('#expenseModal').modal('show');
                console.log('Modal should be visible');
            });
        });
    </script>
{% endblock %}